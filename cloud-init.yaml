#cloud-config
# Note: For Oracle Cloud, use this file content as "user data" when creating the instance
# Make sure to paste the entire file content in the user data field during VM creation

package_update: true
package_upgrade: false
packages:
  - build-essential
  - curl
  - git
  - ca-certificates
  - xz-utils
  - pkg-config
  - autoconf
  - bison
  - libssl-dev
  - zlib1g-dev
  - libreadline-dev
  - libyaml-dev
  - libsqlite3-dev
  - sqlite3
  - libxml2-dev
  - libffi-dev
  - libgdbm-dev
  - libgmp-dev
  - libncurses-dev
  - gnupg
  - software-properties-common
  - lsb-release
  - wireguard
  - wireguard-tools
  - iproute2

write_files:
  - path: /usr/local/bin/install_rbenv_latest.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      USERNAME="${1:-ubuntu}"
      HOME_DIR="$(getent passwd "$USERNAME" | cut -d: -f6)"
      if [ -z "$HOME_DIR" ] || [ ! -d "$HOME_DIR" ]; then
        echo "Home directory for $USERNAME not found" >&2
        exit 1
      fi
      run_as_user() {
        su -l "$USERNAME" -c "bash -lc \"$*\""
      }
      run_as_user 'set -euo pipefail; if [ ! -d "$HOME/.rbenv" ]; then git clone https://github.com/rbenv/rbenv.git "$HOME/.rbenv"; else git -C "$HOME/.rbenv" pull --ff-only || true; fi'
      run_as_user 'mkdir -p "$HOME/.rbenv/plugins"'
      run_as_user 'if [ ! -d "$HOME/.rbenv/plugins/ruby-build" ]; then git clone https://github.com/rbenv/ruby-build.git "$HOME/.rbenv/plugins/ruby-build"; else git -C "$HOME/.rbenv/plugins/ruby-build" pull --ff-only || true; fi'
      # Add rbenv to shell profiles
      run_as_user 'echo "export PATH=\"\$HOME/.rbenv/bin:\$PATH\"" >> "$HOME/.bashrc"'
      run_as_user 'echo "eval \"\$(rbenv init -)\"" >> "$HOME/.bashrc"'
      run_as_user 'echo "export PATH=\"\$HOME/.rbenv/bin:\$PATH\"" >> "$HOME/.profile"'
      run_as_user 'echo "eval \"\$(rbenv init -)\"" >> "$HOME/.profile"'
      # load in this subshell and install latest Ruby
      run_as_user 'export PATH="$HOME/.rbenv/bin:$PATH"; eval "$(rbenv init -)"; RUBY_VERSION="3.4.5"; export RUBY_CONFIGURE_OPTS="--disable-install-doc"; rbenv install -s "$RUBY_VERSION"; rbenv global "$RUBY_VERSION"; gem install bundler --no-document; rbenv rehash; rbenv doctor'

  - path: /usr/local/bin/install_terraform.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      exec 1> >(logger -s -t $(basename $0)) 2>&1
      
      # Check available disk space (need at least 100MB)
      available=$(df / | awk 'NR==2 {print $4}')
      if [ "$available" -lt 102400 ]; then
        echo "ERROR: Insufficient disk space for Terraform installation" >&2
        exit 1
      fi
      
      # Check network connectivity
      if ! curl -s --connect-timeout 10 https://apt.releases.hashicorp.com/gpg >/dev/null; then
        echo "ERROR: Cannot reach HashiCorp repository" >&2
        exit 1
      fi
      
      # HashiCorp apt repo for Terraform
      if ! test -f /usr/share/keyrings/hashicorp-archive-keyring.gpg; then
        curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor | tee /usr/share/keyrings/hashicorp-archive-keyring.gpg >/dev/null
        codename="$(lsb_release -cs)"
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $codename main" > /etc/apt/sources.list.d/hashicorp.list
        apt-get update -y
      fi
      apt-get install -y terraform
      
      # Verify installation
      if ! terraform version; then
        echo "ERROR: Terraform installation failed" >&2
        exit 1
      fi
      
      # Cleanup
      apt-get clean
      echo "Terraform installed successfully."

  - path: /usr/local/bin/install_tailscale.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      exec 1> >(logger -s -t $(basename $0)) 2>&1
      
      # Check network connectivity
      if ! curl -s --connect-timeout 10 https://pkgs.tailscale.com >/dev/null; then
        echo "ERROR: Cannot reach Tailscale repository" >&2
        exit 1
      fi
      
      # Add Tailscale apt repo and install
      if ! test -f /usr/share/keyrings/tailscale-archive-keyring.gpg; then
        codename="$(lsb_release -cs)"
        curl -fsSL "https://pkgs.tailscale.com/stable/ubuntu/${codename}.noarmor.gpg" \
          | tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
        curl -fsSL "https://pkgs.tailscale.com/stable/ubuntu/${codename}.tailscale-keyring.list" \
          | tee /etc/apt/sources.list.d/tailscale.list >/dev/null
        apt-get update -y
      fi
      apt-get install -y tailscale
      
      # Start service and verify
      if ! systemctl enable --now tailscaled; then
        echo "ERROR: Failed to start tailscaled service" >&2
        exit 1
      fi
      
      # Cleanup
      apt-get clean
      echo "Tailscale installed successfully. Run 'sudo tailscale up' to connect."

  - path: /usr/local/bin/install_node_and_clis.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/usr/bin/env bash
      # Install Node.js (via nvm) and user-local CLIs without sudo.
      set -euo pipefail
      exec 1> >(logger -s -t $(basename $0)) 2>&1

      USERNAME="${1:-ubuntu}"
      HOME_DIR="$(getent passwd "$USERNAME" | cut -d: -f6)"
      if [ -z "$HOME_DIR" ] || [ ! -d "$HOME_DIR" ]; then
        echo "Home directory for $USERNAME not found" >&2
        exit 1
      fi

      run_as_user() {
        su -l "$USERNAME" -c "bash -lc \"$*\""
      }

      # Ensure ~/.local/bin is on PATH for the user
      run_as_user 'echo "export PATH=\"\$HOME/.local/bin:\$PATH\"" >> "$HOME/.bashrc"'

      # Install nvm for the user if missing (pinned version)
      NVM_DIR="$HOME_DIR/.nvm"
      if [ ! -s "$NVM_DIR/nvm.sh" ]; then
        run_as_user 'export PROFILE="$HOME/.bashrc"; curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash'
      fi

      # Install Node LTS and set default
      run_as_user 'export NVM_DIR="$HOME/.nvm"; [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"; nvm install --lts; nvm alias default "lts/*"; node -v; npm -v'

      # Configure npm and add nvm to profiles  
      run_as_user 'export NVM_DIR="$HOME/.nvm"; [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"; mkdir -p "$HOME/.local"'
      run_as_user 'echo "export NVM_DIR=\"\$HOME/.nvm\"" >> "$HOME/.bashrc"'
      run_as_user 'echo "[ -s \"\$NVM_DIR/nvm.sh\" ] && source \"\$NVM_DIR/nvm.sh\"" >> "$HOME/.bashrc"'
      run_as_user 'echo "[ -s \"\$NVM_DIR/bash_completion\" ] && source \"\$NVM_DIR/bash_completion\"" >> "$HOME/.bashrc"'

      # Install Claude Code CLI
      run_as_user 'export NVM_DIR="$HOME/.nvm"; [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"; npm install -g @anthropic-ai/claude-code'

      echo "Node.js and requested CLIs setup complete for $USERNAME."

  - path: /usr/local/bin/install_neovim_astronvim.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/usr/bin/env bash
      # Install latest Neovim and AstroNvim configuration
      set -euo pipefail
      exec 1> >(logger -s -t $(basename $0)) 2>&1

      USERNAME="${1:-ubuntu}"
      HOME_DIR="$(getent passwd "$USERNAME" | cut -d: -f6)"
      if [ -z "$HOME_DIR" ] || [ ! -d "$HOME_DIR" ]; then
        echo "Home directory for $USERNAME not found" >&2
        exit 1
      fi

      run_as_user() {
        su -l "$USERNAME" -c "bash -lc \"$*\""
      }

      # Check network connectivity
      if ! curl -s --connect-timeout 10 https://github.com/neovim/neovim/releases >/dev/null; then
        echo "ERROR: Cannot reach GitHub releases" >&2
        exit 1
      fi

      # Detect architecture
      ARCH=$(uname -m)
      case $ARCH in
        x86_64) NVIM_ARCH="x86_64" ;;
        aarch64|arm64) NVIM_ARCH="arm64" ;;
        *) echo "ERROR: Unsupported architecture: $ARCH" >&2; exit 1 ;;
      esac

      # Download and install latest Neovim
      echo "Installing Neovim for $NVIM_ARCH architecture..."
      cd /tmp
      curl -LO "https://github.com/neovim/neovim/releases/latest/download/nvim-linux-${NVIM_ARCH}.tar.gz"
      
      # Remove old installation and extract new one
      rm -rf /opt/nvim*
      tar -C /opt -xzf "nvim-linux-${NVIM_ARCH}.tar.gz"
      
      # Create global symlink
      ln -sf "/opt/nvim-linux-${NVIM_ARCH}/bin/nvim" /usr/local/bin/nvim
      
      # Verify installation
      if ! /usr/local/bin/nvim --version; then
        echo "ERROR: Neovim installation failed" >&2
        exit 1
      fi

      # Install AstroNvim configuration for the user
      echo "Installing AstroNvim configuration for $USERNAME..."
      run_as_user 'rm -rf "$HOME/.config/nvim"'
      run_as_user 'git clone --depth 1 https://github.com/AstroNvim/template "$HOME/.config/nvim"'
      run_as_user 'rm -rf "$HOME/.config/nvim/.git"'

      # Cleanup
      rm -f "/tmp/nvim-linux-${NVIM_ARCH}.tar.gz"
      echo "Neovim and AstroNvim installation complete for $USERNAME."

  - path: /usr/local/bin/install_fzf_lazygit.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/usr/bin/env bash
      # Install fzf and lazygit
      set -euo pipefail
      exec 1> >(logger -s -t $(basename $0)) 2>&1

      USERNAME="${1:-ubuntu}"
      HOME_DIR="$(getent passwd "$USERNAME" | cut -d: -f6)"
      if [ -z "$HOME_DIR" ] || [ ! -d "$HOME_DIR" ]; then
        echo "Home directory for $USERNAME not found" >&2
        exit 1
      fi

      run_as_user() {
        su -l "$USERNAME" -c "bash -lc \"$*\""
      }

      # Check network connectivity
      if ! curl -s --connect-timeout 10 https://github.com >/dev/null; then
        echo "ERROR: Cannot reach GitHub" >&2
        exit 1
      fi

      # Install fzf
      echo "Installing fzf for $USERNAME..."
      run_as_user 'rm -rf "$HOME/.fzf"'
      run_as_user 'git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME/.fzf"'
      run_as_user '"$HOME/.fzf/install" --all --no-bash --no-zsh --no-fish'
      
      # Add fzf to bashrc manually since we disabled auto-setup
      run_as_user 'echo "# fzf setup" >> "$HOME/.bashrc"'
      run_as_user 'echo "export PATH=\"\$HOME/.fzf/bin:\$PATH\"" >> "$HOME/.bashrc"'
      run_as_user 'echo "[ -f ~/.fzf.bash ] && source ~/.fzf.bash" >> "$HOME/.bashrc"'

      # Install lazygit
      echo "Installing lazygit..."
      cd /tmp
      
      # Detect architecture
      ARCH=$(uname -m)
      case $ARCH in
        x86_64) LAZYGIT_ARCH="x86_64" ;;
        aarch64|arm64) LAZYGIT_ARCH="arm64" ;;
        *) echo "ERROR: Unsupported architecture: $ARCH" >&2; exit 1 ;;
      esac

      # Get latest version and download
      LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*' || echo "0.54.2")
      curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_${LAZYGIT_ARCH}.tar.gz"
      
      # Extract and install
      tar xf lazygit.tar.gz
      install lazygit /usr/local/bin/
      
      # Verify installations
      if ! /usr/local/bin/lazygit --version; then
        echo "ERROR: lazygit installation failed" >&2
        exit 1
      fi
      
      if ! run_as_user '"$HOME/.fzf/bin/fzf" --version'; then
        echo "ERROR: fzf installation failed" >&2
        exit 1
      fi

      # Cleanup
      rm -f /tmp/lazygit.tar.gz /tmp/lazygit
      echo "fzf and lazygit installation complete for $USERNAME."

runcmd:
  # Load WireGuard kernel module (packages already installed)
  - ['modprobe', 'wireguard']
  - ['timeout', '300', '/usr/local/bin/install_tailscale.sh']
  - ['timeout', '300', '/usr/local/bin/install_terraform.sh']
  - ['timeout', '1200', '/usr/local/bin/install_rbenv_latest.sh', 'ubuntu']
  - ['timeout', '1800', '/usr/local/bin/install_node_and_clis.sh', 'ubuntu']
  - ['timeout', '600', '/usr/local/bin/install_neovim_astronvim.sh', 'ubuntu']
  - ['timeout', '600', '/usr/local/bin/install_fzf_lazygit.sh', 'ubuntu']

final_message: |
  cloud-init: Ruby (rbenv), Terraform, and WireGuard installation complete.
